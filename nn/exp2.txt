# Exp 2 - Regression Model

import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt

# Data preparation
np.random.seed(42)
X, y = np.random.rand(1000, 5), 3 * np.random.rand(1000) - 5 * np.random.rand(1000) + np.random.randn(1000)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train, X_test = StandardScaler().fit_transform(X_train), StandardScaler().fit(X_train).transform(X_test)

# Model definition and training
model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(32, activation='relu'),
    Dense(1)
])
model.compile(optimizer='adam', loss='mse')
history = model.fit(X_train, y_train, epochs=2, batch_size=32, validation_split=0.2, verbose=1)

# Evaluation and plotting
print("Mean Squared Error:", mean_squared_error(y_test, model.predict(X_test)))
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()
